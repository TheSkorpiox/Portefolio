@inherits Item
@inject Portefolio.Data.GlobalData GlobalData

<div class='@Class' style='@style'>
    <div class='window-top-bar' @onmousedown="OnMouseDown" @onmouseup="OnMouseUp" @onmouseout="OnMouseOut" @onmousemove="OnMouseMove">
        <img src='@ImagePath' class='window-image' />
        <div class='window-title'>@Name</div>
    </div>
    <div class='window-body'>
        @ChildContent
    </div>
</div>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string Class { get; set; }

    string style
    {
        get
        {
            return $@"
            top: {offsetY}px;
            left: {offsetX}px;
            z-index: {zIndex};";
        }
    }

    // TODO: Find a better way to handle window move
    private bool canMove = false;

    private double clientX = 200;
    private double clientY = 150;

    private double startX = 0;
    private double startY = 0;

    private double offsetX = 200;
    private double offsetY = 150;

    private int zIndex = 0;

    protected override void OnInitialized()
    {
        GlobalData.ZIndex++;
        zIndex = GlobalData.ZIndex; // On garde une valeur statique de zIndex localement
    }

    private void OnMouseDown(MouseEventArgs mouseEventArgs)
    {
        canMove = true;
        startX = mouseEventArgs.ClientX;
        startY = mouseEventArgs.ClientY;

        GlobalData.ZIndex++;
        zIndex = GlobalData.ZIndex; // On garde une valeur statique de zIndex localement
    }

    private void OnMouseUp(MouseEventArgs mouseEventArgs)
    {
        canMove = false;
        clientX = offsetX;
        clientY = offsetY;
    }

    private void OnMouseOut(MouseEventArgs mouseEventArgs)
    {
        canMove = false;
        clientX = offsetX;
        clientY = offsetY;
    }

    private void OnMouseMove(MouseEventArgs mouseEventArgs)
    {
        if (canMove)
        {
            offsetX = clientX + (mouseEventArgs.ClientX - startX);
            offsetY = clientY + (mouseEventArgs.ClientY - startY);
        }
    }
}
